** A graph is a data structure that consists of a set of nodes (also called vertices) and a set of edges connecting pairs of nodes. 
Graphs are used to represent various kinds of relationships and structures, such as social networks, transportation networks, and dependency graphs. **

** Key Components
1) Node (Vertex): The fundamental unit of a graph.
2) Edge: A connection between two nodes. An edge can be directed (having a direction) or undirected (no direction).
3) Adjacency: Two nodes are adjacent if they are connected by an edge.
4) Degree: The number of edges connected to a node. In directed graphs, there are in-degree (edges coming in) and out-degree (edges going out).

** Types of Graphs
1) Undirected Graph: A graph where edges have no direction. An edge between node A and node B is represented as (A, B) or (B, A).
2) Directed Graph (Digraph): A graph where edges have a direction. An edge from node A to node B is represented as (A → B).
3) Weighted Graph: A graph where each edge has a weight or cost associated with it. Commonly used in scenarios like shortest path problems.
4) Unweighted Graph: A graph where all edges are considered to have the same weight.
5) Connected Graph: An undirected graph where there is a path between every pair of nodes.
6) Disconnected Graph: A graph where at least one pair of nodes does not have a path between them.
7) Cyclic Graph: A graph that contains at least one cycle, a path of edges and vertices wherein a vertex is reachable from itself.
8) Acyclic Graph: A graph that contains no cycles. A Directed Acyclic Graph (DAG) is an important type used in many applications.
9) Bipartite Graph: A graph whose nodes can be divided into two disjoint sets such that every edge connects a node in one set to a node in the other set.


** Graph Representation
1) Adjacency Matrix: A 2D array where matrix[i][j] indicates the presence (and possibly weight) of an edge between nodes i and j.
2) Adjacency List: An array of lists. The index represents a node, and the list at each index contains the nodes that are adjacent to it.
3) Edge List: A list of all edges, where each edge is represented by a pair (or tuple) of nodes.

** Graph Operations
1) Traversal: Visiting all the nodes in some order.
      i) Depth-First Search (DFS): Explores as far down a branch as possible before backtracking.
      ii) Breadth-First Search (BFS): Explores all neighbors of a node before moving on to the neighbors' neighbors.
2) Shortest Path: Finding the shortest path between nodes.
      i) Dijkstra's Algorithm: For weighted graphs without negative weights.
      ii) Bellman-Ford Algorithm: For graphs with negative weights.
      iii) Floyd-Warshall Algorithm: For finding shortest paths between all pairs of nodes.
3) Cycle Detection: Checking whether a graph contains any cycles.
4) Topological Sorting: Ordering of nodes in a Directed Acyclic Graph (DAG) such that for every directed edge u → v, node u comes before node v.
5) Minimum Spanning Tree (MST): A subset of edges that connects all nodes with the minimum possible total edge weight.
        1) Kruskal's Algorithm: Uses a greedy approach and works with edge lists.
        2) Prim's Algorithm: Also uses a greedy approach but works with adjacency matrices or lists.

** Applications of Graphs
Social Networks: Representing relationships between users.
Routing Algorithms: Finding the shortest path in networks like the internet.
Dependency Graphs: Representing dependencies in tasks or modules.
Search Engines: PageRank algorithm to rank web pages.
Geographical Maps: Finding shortest paths and spanning trees.
Scheduling: Using topological sorting to determine order of tasks.
Graphs are incredibly versatile and widely used in various fields of computer science and real-world applications due to their ability to represent complex relationships and structures efficiently.


